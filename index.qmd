---
title: ""
# author: "Matt Wood"
format: 
  html:
    smooth-scroll: true
    embed-resources: true
page-layout: full
toc: true
toc-title: "![](./images/BOWL2024.png)"
toc-depth: 4
toc-expand: 1
toc-location: left
editor: visual
theme: custom.scss
execute:
  echo: false
  warning: false
---

```{r dependencies}

# data ingest
library(ffscrapr)
library(curl)
library(readr)

# data munging
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(purrr)

# data display and interaction
library(DT)

# get connection to Sleeper leagues
source("R/get_conn.R")
```

::: card
**Updated: `r toupper(format(lubridate::with_tz(Sys.time(), tzone="America/New_York"), "%a %Y-%m-%d %H:%M:%S %Z"))`**

**NOTE: Results are final for Week `r as.numeric(readr::read_lines("dat/update_week.txt"))`.**

:::

## Intro

Welcome to the scoring and transaction site for the Living the Stream Bowl 2025!

Individual Sleeper league sites and League Managers, you may have to ask LMs for league "view only" access:

-   [L1](https://sleeper.com/leagues/1264963268108111872) - [\@Weagle85](https://discord.com/channels/@me/1142996811498397816)

-   [L2](https://sleeper.com/leagues/1264964413060820992) - [\@Aaron](https://discord.com/channels/@me/1143739424119726180)

-   [L3](https://sleeper.com/leagues/1264964517792591872)- [\@dereknotderrick](https://discord.com/channels/@me/1148606137432817754)

-   [L4](https://sleeper.com/leagues/1264964602135846912) - [\@apulianas](https://discord.com/channels/@me/293937564447145994)


For scoring site issues and questions, please reach out to Matt Wood by [email](mailto:matthewdwood82@gmail.com) or [Discord](https://discord.com/channels/@me/838756468014186582).

## Bylaws

Bylaws for the league are available here, reach out to LTS commish Greg Bryant by [email](mailto:lts.leaguecommish@gmail.com) or on [Discord](https://discord.com/channels/@me/1142996811498397816) for access: [2025 bylaws]()

## Scoring

### Weekly Report

```{r weekly_report}

readr::read_csv("dat/df_weekly.csv", col_types = "iccccddd") %>% 
DT::datatable(
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 6,
    lengthMenu = c(6, 24, 102),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
) %>% 
  DT::formatRound(c("Awardee Score", "Opponent Score", "Difference"), digits = 2) 

```

### Total Points

```{r total_points}

readr::read_csv("dat/df_total_points.csv", col_types = "cddc") %>% 
DT::datatable(
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 50,
    lengthMenu = c(10, 25, 50),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
) %>% 
  DT::formatRound(c("Total Points For", "Total Points Against"), digits = 2) 

```

### All Results

A table with results of each matchup for each week.

```{r all_results}

readr::read_csv("dat/df_scores.csv", col_types = "cicdcdcd") %>% 
  dplyr::arrange(desc(week), league) %>%
  dplyr::select(
    League = league,
    Week = week,
    Team = franchise_name,
    Score = franchise_score,
    Opponent = franchise_name_opponent,
    `Opp. Score` = opponent_score,
    Result = result,
    Difference = diff_score,
    `Diff Rank` = diff_rank,
    `Total Score` = total_score,
    `Total Rank` = total_rank
  ) %>% 
  DT::datatable(
    .,
    rownames = FALSE,
    filter = "top",
    extensions = "Buttons",
    options = list(
      pageLength = 25,
      lengthMenu = c(25, 50, 100),
      dom = "Bfrtpl",
      buttons = c("csv", "excel", "pdf")
    )
  ) %>% 
  DT::formatRound(c("Score", "Opp. Score", "Difference"), digits = 2) 
```

### Playoffs

Coming Soon?!

```{r playoffs}


```

### Survival Pool

Three teams are removed from the survival pool each week until there is only one team remaining after Week 16 MNF.

If two teams are tied at the end of a week, the team with the fewest cumulative points to date will be eliminated.

These results should be considered interim until after Sleeper's data provider has processed most of its stat corrections on Tuesdays. See [Sleeper documentation](https://support.sleeper.com/en/articles/2441282-stat-corrections) for more information.

#### Teams Still in Pool

```{r survival_teams}

# plot survival table
readr::read_csv("dat/df_survived.csv", col_types = "icccdd") %>% 
  DT::datatable(
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 12,
    lengthMenu = c(12, 24, 48),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
) %>% 
  DT::formatRound(c("Score", "Cumulative Score"), digits = 2) 



```

#### Teams Eliminated from Pool

```{r eliminated_teams}

# plot eliminated table
readr::read_csv("dat/df_eliminated.csv", col_types = "icccdd") %>% 
DT::datatable(
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 12,
    lengthMenu = c(12, 24, 48),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
) %>% 
  DT::formatRound(c("Score", "Cumulative Score at Elimination"), digits = 2) 
```

## Transactions

```{r all_transactions}

df_all_transactions <- purrr::map(lts_conn, ~ ff_transactions(.x)) %>%
  dplyr::bind_rows(.id = "league") %>%
  arrange(desc(timestamp), league) %>%
  mutate(
    week = difftime(timestamp, lubridate::ymd("2024-09-04"), units = "weeks") %>% ceiling(.) %>% as.integer(.) %>% if_else(. < 0L, 0L, .),
    timestamp = toupper(format(lubridate::with_tz(timestamp, tzone="America/New_York"), "%a %Y-%m-%d %H:%M:%S %Z"))
  ) %>%
  select(league, week, everything())


```

### Free Agent Transactions

A list of free agent transactions.

```{r free_agent}
df_all_transactions %>%
  dplyr::filter(stringr::str_detect(type, "free_agent")) %>%
  dplyr::select(League = league, Week = week, Timestamp = timestamp, Type = type, Description = type_desc, Team = franchise_name, `Player Name` = player_name, Position = pos, `NFL Team` = team) %>%
  DT::datatable(.,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 50,
    lengthMenu = c(50, 100, 200),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)

```

### Waiver Bids

A list of FAAB transactions.

```{r waiver_bids}
df_all_transactions %>%
  dplyr::filter(stringr::str_detect(type, "waiver")) %>%
  dplyr::select(
    League = league,
    Week = week,
    Timestamp = timestamp,
    Type = type,
    Description = type_desc,
    Team = franchise_name,
    `Player Name` = player_name,
    Position = pos,
    `NFL Team` = team,
    `Bid Amount` = bbid_amount,
    # `Waiver Priority` = waiver_priority,
    Comment = comment
  ) %>% 
  DT::datatable(.,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 50,
    lengthMenu = c(50, 100, 200),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)

```

### Trades

A list of trade transactions.

```{r trades}
df_all_transactions %>%
  dplyr::filter(stringr::str_detect(type, "trade")) %>%
  dplyr::select(League = league, Week = week, Timestamp = timestamp, Type = type, Description = type_desc, Team = franchise_name, `Player Name` = player_name, Position = pos, `NFL Team` = team, `Bid Amount` = bbid_amount, 
                # `Trade Partner` = trade_partner,
                # `Waiver Priority` = waiver_priority, 
                Comment = comment) %>%
  DT::datatable(.,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  options = list(
    pageLength = 50,
    lengthMenu = c(50, 100, 200),
    dom = "Bfrtpl",
    buttons = c("csv", "excel", "pdf")
  )
)

```
